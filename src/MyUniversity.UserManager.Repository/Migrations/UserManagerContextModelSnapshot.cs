// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyUniversity.UserManager.Repository.DbContext;

namespace MyUniversity.UserManager.Repository.Migrations
{
    [DbContext(typeof(UMDBContext))]
    partial class UserManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.1.21102.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.University.UniversityEntity", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TenantId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            TenantId = "11116258-9207-4bdc-b101-fb560cc8cb20",
                            Address = "University Street, 1, Lviv, Lviv region, 79000",
                            EmailAddress = "Ivan.Franko.University@lnu.edu.ua",
                            Name = "Ivan Franko National University of Lviv",
                            PhoneNumber = "+380 (50) 123 4567"
                        });
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Role")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Role = "Service"
                        },
                        new
                        {
                            Id = 3,
                            Role = "UniversityAdmin"
                        },
                        new
                        {
                            Id = 4,
                            Role = "Teacher"
                        },
                        new
                        {
                            Id = 5,
                            Role = "Student"
                        });
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "Super.Admin@gmail.com",
                            FirstName = "Super",
                            IsSoftDeleted = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 127, 26, 201, 117, 70, 201, 48, 108, 51, 207, 47, 13, 130, 101, 243, 22, 230, 233, 25, 97, 207, 95, 90, 129, 15, 76, 192, 69, 41, 88, 112, 170, 238, 246, 216, 163, 26, 131, 197, 211, 90, 156, 87, 160, 97, 222, 127, 217, 153, 245, 225, 245, 232, 202, 53, 42, 60, 144, 157, 10, 116, 101, 37, 15 },
                            PasswordSalt = new byte[] { 103, 23, 71, 255, 237, 126, 38, 253, 48, 82, 222, 133, 194, 58, 131, 140, 23, 137, 187, 241, 170, 203, 66, 143, 229, 153, 158, 62, 93, 194, 173, 52, 171, 196, 52, 91, 61, 93, 12, 237, 78, 161, 247, 59, 161, 243, 222, 140, 150, 176, 68, 160, 18, 235, 80, 37, 145, 116, 67, 25, 73, 26, 127, 3, 67, 57, 9, 16, 175, 163, 182, 209, 5, 15, 153, 250, 28, 9, 132, 195, 146, 230, 202, 240, 133, 99, 68, 98, 193, 33, 136, 57, 148, 160, 157, 58, 72, 27, 72, 131, 36, 114, 108, 201, 47, 234, 75, 245, 81, 19, 107, 242, 157, 61, 244, 199, 190, 48, 194, 126, 121, 205, 99, 255, 119, 233, 208, 58 },
                            PhoneNumber = "380 50 123 4567"
                        },
                        new
                        {
                            Id = 2,
                            EmailAddress = "UserManager.Service@gmail.com",
                            FirstName = "UserManager",
                            IsSoftDeleted = false,
                            LastName = "Service",
                            PasswordHash = new byte[] { 127, 26, 201, 117, 70, 201, 48, 108, 51, 207, 47, 13, 130, 101, 243, 22, 230, 233, 25, 97, 207, 95, 90, 129, 15, 76, 192, 69, 41, 88, 112, 170, 238, 246, 216, 163, 26, 131, 197, 211, 90, 156, 87, 160, 97, 222, 127, 217, 153, 245, 225, 245, 232, 202, 53, 42, 60, 144, 157, 10, 116, 101, 37, 15 },
                            PasswordSalt = new byte[] { 103, 23, 71, 255, 237, 126, 38, 253, 48, 82, 222, 133, 194, 58, 131, 140, 23, 137, 187, 241, 170, 203, 66, 143, 229, 153, 158, 62, 93, 194, 173, 52, 171, 196, 52, 91, 61, 93, 12, 237, 78, 161, 247, 59, 161, 243, 222, 140, 150, 176, 68, 160, 18, 235, 80, 37, 145, 116, 67, 25, 73, 26, 127, 3, 67, 57, 9, 16, 175, 163, 182, 209, 5, 15, 153, 250, 28, 9, 132, 195, 146, 230, 202, 240, 133, 99, 68, 98, 193, 33, 136, 57, 148, 160, 157, 58, 72, 27, 72, 131, 36, 114, 108, 201, 47, 234, 75, 245, 81, 19, 107, 242, 157, 61, 244, 199, 190, 48, 194, 126, 121, 205, 99, 255, 119, 233, 208, 58 },
                            PhoneNumber = "000"
                        });
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.UserRoleEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.UserEntity", b =>
                {
                    b.HasOne("MyUniversity.UserManager.Repository.Entities.University.UniversityEntity", "University")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("University");
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.UserRoleEntity", b =>
                {
                    b.HasOne("MyUniversity.UserManager.Repository.Entities.User.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyUniversity.UserManager.Repository.Entities.User.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.University.UniversityEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MyUniversity.UserManager.Repository.Entities.User.UserEntity", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
